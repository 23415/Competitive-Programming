 : 
Solution :
# Python  
age=input(int("Age : "))
print(age);
                                                                                                                                               Maintainer : Gaurav-2803
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

0. Create a function that finds the maximum range of a triangle's third edge, where the side lengths are all integers. Note. (side1 + side2) - 1 = maximum range of third edge.
Solution :

1. You are given an integer 'N', your task is to find and return thr N'th Fibonacci Number using Matrix Exponentiation.
Solution : 

2. Write functions that add, subtract, and multiply two numbers in their digit-list representation (and return a new digit list) using Karatsuba multiplication.
Solution :
// C++ implementation of Karatsuba algorithm for bit string multiplication.
#include<iostream>
#include<stdio.h>

using namespace std;

// FOLLOWING TWO FUNCTIONS ARE COPIED FROM http://goo.gl/q0OhZ
// Helper method: given two unequal sized bit strings, converts them to
// same length by adding leading 0s in the smaller string. Returns the
// the new length
int makeEqualLength(string &str1, string &str2)
{
	int len1 = str1.size();
	int len2 = str2.size();
	if (len1 < len2)
	{
		for (int i = 0 ; i < len2 - len1 ; i++)
			str1 = '0' + str1;
		return len2;
	}
	else if (len1 > len2)
	{
		for (int i = 0 ; i < len1 - len2 ; i++)
			str2 = '0' + str2;
	}
	return len1; // If len1 >= len2
}

// The main function that adds two bit sequences and returns the addition
string addBitStrings( string first, string second )
{
	string result; // To store the sum bits

	// make the lengths same before adding
	int length = makeEqualLength(first, second);
	int carry = 0; // Initialize carry

	// Add all bits one by one
	for (int i = length-1 ; i >= 0 ; i--)
	{
		int firstBit = first.at(i) - '0';
		int secondBit = second.at(i) - '0';

		// boolean expression for sum of 3 bits
		int sum = (firstBit ^ secondBit ^ carry)+'0';

		result = (char)sum + result;

		// boolean expression for 3-bit addition
		carry = (firstBit&secondBit) | (secondBit&carry) | (firstBit&carry);
	}

	// if overflow, then add a leading 1
	if (carry) result = '1' + result;

	return result;
}

// A utility function to multiply single bits of strings a and b
int multiplyiSingleBit(string a, string b)
{ return (a[0] - '0')*(b[0] - '0'); }

// The main function that multiplies two bit strings X and Y and returns
// result as long integer
long int multiply(string X, string Y)
{
	// Find the maximum of lengths of x and Y and make length
	// of smaller string same as that of larger string
	int n = makeEqualLength(X, Y);

	// Base cases
	if (n == 0) return 0;
	if (n == 1) return multiplyiSingleBit(X, Y);

	int fh = n/2; // First half of string, floor(n/2)
	int sh = (n-fh); // Second half of string, ceil(n/2)

	// Find the first half and second half of first string.
	// Refer http://goo.gl/lLmgn for substr method
	string Xl = X.substr(0, fh);
	string Xr = X.substr(fh, sh);

	// Find the first half and second half of second string
	string Yl = Y.substr(0, fh);
	string Yr = Y.substr(fh, sh);

	// Recursively calculate the three products of inputs of size n/2
	long int P1 = multiply(Xl, Yl);
	long int P2 = multiply(Xr, Yr);
	long int P3 = multiply(addBitStrings(Xl, Xr), addBitStrings(Yl, Yr));

	// Combine the three products to get the final result.
	return P1*(1<<(2*sh)) + (P3 - P1 - P2)*(1<<sh) + P2;
}

// Driver program to test above functions
int main()
{
	printf ("%ld\n", multiply("1100", "1010"));
	printf ("%ld\n", multiply("110", "1010"));
	printf ("%ld\n", multiply("11", "1010"));
	printf ("%ld\n", multiply("1", "1010"));
	printf ("%ld\n", multiply("0", "1010"));
	printf ("%ld\n", multiply("111", "111"));
	printf ("%ld\n", multiply("11", "11"));
}


3. Implement the following sorting algorithms: Selection sort, Insertion sort, Merge sort, Quick sort, Stooge Sort.
Solution :

4. Write function that translates a text to Pig Latin and back. English is translated to Pig Latin by taking the first letter of every word, moving it to the end of the word and adding ‘ay’. “The quick brown fox” becomes “Hetay uickqay rownbay oxfay”.
Solution :

5. Write a program that outputs all possibilities to put + or - or nothing between the numbers 1,2,…,9 (in this order) such that the result is 100. For example 1 + 2 + 3 - 4 + 5 + 6 + 78 + 9 = 100
Solution :

6. Sort array of 0s,1s and 2s in a single scan (Visiting each element once).
Solution : 
#CPP
// Function to sort the input array,
void sort012(int a[])
{
	int n=arr.size();
 int low = 0;
	int high = n - 1;
	int mid = 0;

	// Iterate till all the elements
	// are sorted
	while (mid <= hi) {
		switch (a[mid]) {

		// If the element is 0
		case 0:
			swap(a[lo++], a[mid++]);
			break;

		// If the element is 1 .
		case 1:
			mid++;
			break;

		// If the element is 2
		case 2:
			swap(a[mid], a[hi--]);
			break;
		}
	}
}



7. The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
      I/O -> n = 4   O/P -> [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Solution : 
#CPP
//Used BackTraking Using Recursion
void sol(int ind,int n,vector<vector<int>> &v,map<int,int> &row,vector<int> &ds,vector<vector<int>> &flag)
    {
        if(ind==n)
        {
            v.push_back(ds);
            return;
        }
             
        
        for(int i=0;i<n;i++)
        {
            if(row[i]==0 && flag[i][ind]==0)
            { 
                for(int j=ind,k=i;j<n && k<n;k++,j++)
                 {
                   flag[k][j]++;
                }
                for(int j=ind,k=i;j<n && k>-1;k--,j++)
                 {
                   flag[k][j]++;
                }
                row[i]++;
                ds.push_back(i);
                sol(ind+1,n,v,row,ds,flag);
                ds.pop_back();
                for(int j=ind,k=i;j<n && k<n;k++,j++)
                 {
                   flag[k][j]--;
                }
                for(int j=ind,k=i;j<n && k>-1;k--,j++)
                 {
                   flag[k][j]--;
                }
                row[i]--;
            }   
        }
        return;
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> v;
        map<int,int> row;
        vector<int> ds;
        vector<vector<int>> flag(n,vector<int> (n,0));
        sol(0,n,v,row,ds,flag);
        vector<vector<string>> ans;
        vector<string> s;

        for(int i=0;i<v.size();i++)
        {
            for(int j=0;j<n;j++)
            {
                string temp;
                for(int k=0;k<n;k++)
                {
                    if(v[i][k]==j)
                        temp.append(1,'Q');
                    else 
                        temp.append(1,'.');
                }
                s.push_back(temp);
                
            }
            ans.push_back(s);
            s.clear();
        }
        
        
        return ans;
        
        
    }

8. Lexicographical order is often known as alphabetical order when dealing with strings. A string is greater than another string if it comes later in a lexicographically sorted list.
Given a word, create a new word by swapping some or all of its characters. This new word must meet two criteria:
  It must be greater than the original word
  It must be the smallest word that meets the first condition
      I/O -> abcd   O/P -> abdc  
      
Solution :#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

string biggerIsGreater(string w) {
    int target = -1;
    int target2 = -1;
    for(int i=w.size()-1;i>=0;i--){
        if(w[i]-'a'>w[i-1]-'a'){
            target = i-1;
            break;
        }
    }
    if(target==-1){
        return "no answer";
    }
    for(int i=w.size()-1;i>=0;i--){
        if(w[i]-'a'>w[target]-'a'){
            target2=i;
            break;
        }
    }
    swap(w[target],w[target2]);
    reverse(w.begin()+target+1,w.end());
    return w;
}   
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string T_temp;
    getline(cin, T_temp);

    int T = stoi(ltrim(rtrim(T_temp)));

    for (int T_itr = 0; T_itr < T; T_itr++) {
        string w;
        getline(cin, w);

        string result = biggerIsGreater(w);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
